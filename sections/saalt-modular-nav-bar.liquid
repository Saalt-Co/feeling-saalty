{%- assign nav_id = section.settings.section_id | handleize -%}

<div id="section-{{ section.id }}" data-section-id="{{ section.id }}" class="">
  <modular-nav-bar
    data-custom-val="{{ nav_id }}"
    {% if section.settings.section_id != blank %}
      id="{{ section.settings.section_id | handleize }}"
    {% endif -%}
    class="section-inner{% if section.settings.theme_color_background != 'theme_default' %} {{ section.settings.theme_color_background }}{% endif %}{% if section.settings.theme_color_text != 'theme_default' %} {{ section.settings.theme_color_text }}{% else %} default{% endif %}"
  >
    <ul>
      {%- for block in section.blocks -%}
        {% if block.settings.nav_bar_link_text != blank %}
          {%- liquid
            assign link_first_char = block.settings.nav_bar_link_dest | slice: 0
            if link_first_char == '#'
              assign current_link = block.settings.nav_bar_link_dest | handleize
              assign current_link = '#' | append: current_link
            else
              assign current_link = block.settings.nav_bar_link_dest
            endif
          -%}
          <li>
            <a
              href="{{ current_link }}"
              {% if forloop.first %}
                class="active"
              {% endif %}
              {{ block.shopify_attributes }}
            >
              {{- block.settings.nav_bar_link_text -}}
            </a>
          </li>
        {% endif %}
      {%- endfor -%}
    </ul>
  </modular-nav-bar>
</div>

{%- style -%}
  #section-{{ section.id }} modular-nav-bar {
    display: block;
  }
  #section-{{ section.id }} modular-nav-bar > ul {
    list-style: none;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0;
    padding: 2rem;
    overflow-x: scroll;
    width: auto;
    column-gap: {{ section.settings.mobile_nav_link_gap }};
  }
  #section-{{ section.id }} modular-nav-bar > ul > li {
    cursor: pointer;
  }
  #section-{{ section.id }} modular-nav-bar.default a {
    color: rgba(var(--color-link-text), var(--color-link-text-opacity));
  }
  #section-{{ section.id }} modular-nav-bar > ul > li > a {
    width: 100%;
    padding: 0;
    white-space: nowrap;
    font-size: 1.75rem;
    font-weight: 600;
    padding: 0 2rem;
    text-decoration: transparent;
    text-underline-offset: calc(var(--buttons-border-offset) * 10);
  }
  #section-{{ section.id }} modular-nav-bar > ul > li > a:hover,
  #section-{{ section.id }} modular-nav-bar > ul > li > a.active {
    text-decoration: underline;
    text-decoration-thickness: var(--buttons-border-width);
  }
  @media screen and (min-width: 750px) {
    #section-{{ section.id }} modular-nav-bar > ul {
      column-gap: {{ section.settings.desktop_nav_link_gap }};
    }
  }
  {%- if section.settings.make_sticky -%}
  #{{ nav_id }}.sticky {
    position: fixed;
    width: 100%;
    z-index: 10;
  }
  {%- endif -%}
{%- endstyle -%}

{% javascript %}
  class ModularNavBar extends HTMLElement {
    constructor() {
      super();

      this.navClick = this.handleNavLinkClick.bind(this);
      this.previousScrollPosition = 0;
      this.navId = this.dataset.customVal;
      this.throttleDelay = 50;

      window.addEventListener(
        'scroll',
        throttle(() => {
          this.handleScroll();
        }, this.throttleDelay)
      );
      window.addEventListener(
        'resize',
        throttle(() => {
          this.handleScroll();
        }, this.throttleDelay)
      );
    }

    connectedCallback() {
      this.addEventListeners();
    }

    disconnectedCallback() {
      this.removeEventListeners();
    }

    addEventListeners() {
      const thisNavsLinks = this.querySelectorAll('a');
      for (const link of thisNavsLinks) {
        link.addEventListener('click', this.navClick, false);
      }
    }

    removeEventListeners() {
      const thisNavsLinks = this.querySelectorAll('a');
      for (const link of thisNavsLinks) {
        link.removeEventListener('click', this.navClick, false);
      }
    }

    handleNavLinkClick(e) {
      e.preventDefault();
      this.querySelector('a.active').classList.remove('active');
      e.target.classList.add('active');
      this.scrollTo(document.getElementById(e.target.getAttribute('href').replace('#', '')));
    }

    scrollTo(element) {
      const headerInfo = this.getHeaderInfo();
      window.scroll({
        behavior: 'smooth',
        left: 0,
        top: element.getBoundingClientRect().top + window.scrollY + headerInfo.totalHeaderHeight,
      });
    }

    getHeaderInfo() {
      let mainNav = document.querySelector('.header');
      let announcementBar = document.querySelector('.announcement-bar');
      let headerInfo = {
        mainNavHeight: mainNav.getBoundingClientRect().height,
        announcementBarHeight: announcementBar.getBoundingClientRect().height,
        totalHeaderHeight: mainNav.getBoundingClientRect().height + announcementBar.getBoundingClientRect().height,
      };
      return headerInfo;
    }

    nextSiblingYOffset(targetEl) {
      const nextSiblingOffset = {
        neighbor: targetEl.closest('.shopify-section').nextElementSibling,
        offset: Math.ceil(
          targetEl.closest('.shopify-section').nextElementSibling.offsetTop - targetEl.getBoundingClientRect().height
        ),
      };
      return nextSiblingOffset;
    }

    isScrollingDown() {
      let goingDown = false;
      let scrollPosition = window.pageYOffset;
      if (scrollPosition > this.previousScrollPosition) {
        goingDown = true;
      }
      this.previousScrollPosition = scrollPosition;
      return goingDown;
    }

    handleScroll() {
      const headerBottom = document.querySelector('header').getBoundingClientRect().bottom;
      const navBar = document.getElementById(this.navId);
      const navBarHeight = navBar.getBoundingClientRect().height;
      const headerInfo = this.getHeaderInfo();
      const headerHeight = headerInfo.totalHeaderHeight;
      const navBarUl = navBar.querySelector('ul');
      const navBarUlStyle = navBarUl.currentStyle || window.getComputedStyle(navBarUl);
      const topNavBarUlPadding = parseInt(navBarUlStyle.paddingTop);
      const nextSiblingOffset = this.nextSiblingYOffset(navBar);
      const scrollLocation = Math.ceil(window.scrollY + headerHeight - navBarHeight);
      const threshold = Math.ceil(navBar.offsetTop - navBarHeight + topNavBarUlPadding * 2);
      // const scrollDownCondition = scrollLocation > threshold && !navBar.classList.contains('sticky');
      const scrollUpCondition =
        scrollLocation < nextSiblingOffset.offset - navBarHeight / 2.25 && navBar.classList.contains('sticky');

      navBar.style.top = `${headerBottom}px`;

      if (this.isScrollingDown()) {
        if (scrollLocation > threshold) {
          navBar.classList.add('sticky');
          // navBar.style.top = `${headerInfo.mainNavHeight}px`;
          nextSiblingOffset.neighbor.style.marginTop = `${navBarHeight}px`;
        }
      } else {
        if (scrollUpCondition) {
          navBar.classList.remove('sticky');
          navBar.removeAttribute('style');
          nextSiblingOffset.neighbor.removeAttribute('style');
        }
      }
    }
  }

  customElements.define('modular-nav-bar', ModularNavBar);
{% endjavascript %}

{% schema %}
{
  "name": "Saalt Modular Nav Bar",
  "class": "modular-nav-bar",
  "settings": [
    {
      "type": "text",
      "id": "section_id",
      "label": "Section ID (Optional)",
      "info": "Typically only used when setting this ID as a link's destination."
    },
    {
      "type": "header",
      "content": "Nav Bar Styling"
    },
    {
      "type": "checkbox",
      "id": "make_sticky",
      "label": "Make sticky",
      "info": "When enabled, this nav bar will become stuck to the header on scroll. See notes below!",
      "default": false
    },
    {
      "type": "paragraph",
      "content": "❗️NOTE❗️: There should only be *1* sticky nav bar per page. If you set more than 1, only the 1st will be sticky. *THE SECTION ID ABOVE MUST BE FILLED IN FOR THIS FUNCTIONALITY TO WORK*. Additionally, the section ID MUST BE UNIQUE to the page."
    },
    {
      "type": "select",
      "id": "theme_color_background",
      "label": "t:settings_schema.theme_colors.settings.sections.background_color_label",
      "info": "Sets the background color",
      "options": [
        {
          "value": "theme_default",
          "label": "t:settings_schema.color_palette.settings.theme_default.label"
        },
        {
          "value": "theme-color-bg-0",
          "label": "t:settings_schema.color_palette.settings.palette_color_0.label"
        },
        {
          "value": "theme-color-bg-1",
          "label": "t:settings_schema.color_palette.settings.palette_color_1.label"
        },
        {
          "value": "theme-color-bg-2",
          "label": "t:settings_schema.color_palette.settings.palette_color_2.label"
        },
        {
          "value": "theme-color-bg-3",
          "label": "t:settings_schema.color_palette.settings.palette_color_3.label"
        },
        {
          "value": "theme-color-bg-4",
          "label": "t:settings_schema.color_palette.settings.palette_color_4.label"
        },
        {
          "value": "theme-color-bg-5",
          "label": "t:settings_schema.color_palette.settings.palette_color_5.label"
        },
        {
          "value": "theme-color-bg-6",
          "label": "t:settings_schema.color_palette.settings.palette_color_6.label"
        },
        {
          "value": "theme-color-bg-7",
          "label": "t:settings_schema.color_palette.settings.palette_color_7.label"
        }
      ],
      "default": "theme_default"
    },
    {
      "type": "select",
      "id": "theme_color_text",
      "label": "t:settings_schema.theme_colors.settings.sections.text_color_label",
      "info": "Sets the text color",
      "options": [
        {
          "value": "theme_default",
          "label": "t:settings_schema.color_palette.settings.theme_default.label"
        },
        {
          "value": "theme-color-text-0",
          "label": "t:settings_schema.color_palette.settings.palette_color_0.label"
        },
        {
          "value": "theme-color-text-1",
          "label": "t:settings_schema.color_palette.settings.palette_color_1.label"
        },
        {
          "value": "theme-color-text-2",
          "label": "t:settings_schema.color_palette.settings.palette_color_2.label"
        },
        {
          "value": "theme-color-text-3",
          "label": "t:settings_schema.color_palette.settings.palette_color_3.label"
        },
        {
          "value": "theme-color-text-4",
          "label": "t:settings_schema.color_palette.settings.palette_color_4.label"
        },
        {
          "value": "theme-color-text-5",
          "label": "t:settings_schema.color_palette.settings.palette_color_5.label"
        },
        {
          "value": "theme-color-text-6",
          "label": "t:settings_schema.color_palette.settings.palette_color_6.label"
        },
        {
          "value": "theme-color-text-7",
          "label": "t:settings_schema.color_palette.settings.palette_color_7.label"
        }
      ],
      "default": "theme_default"
    },
    {
      "type": "text",
      "id": "mobile_nav_link_gap",
      "label": "Space between nav links on *MOBILE*",
      "info": "Any valid css value is accepted",
      "default": "3rem"
    },
    {
      "type": "text",
      "id": "desktop_nav_link_gap",
      "label": "Space between nav links on *DESKTOP*",
      "info": "Any valid css value is accepted",
      "default": "7rem"
    }
  ],
  "blocks": [
    {
      "type": "nav_bar_link",
      "name": "Nav Bar Link",
      "settings": [
        {
          "type": "paragraph",
          "content": "❗️NOTE❗️: When using an element ID for scrolling, you *MUST* add a '#' at the very beginning. You will also have to press enter/return after typing it in or the field will go blank."
        },
        {
          "type": "text",
          "id": "nav_bar_link_text",
          "label": "Link Text",
          "default": "New Link"
        },
        {
          "type": "url",
          "id": "nav_bar_link_dest",
          "label": "Nav Bar Link Destination",
          "info": "This can be selected from the dropdown *or* a typed in element ID starting with a '#'"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Saalt Modular Nav Bar",
      "category": "custom saalt section",
      "settings": {},
      "blocks": [
        {
          "type": "nav_bar_link",
          "settings": {
            "nav_bar_link_text": "New Link",
            "nav_bar_link_dest": "#"
          }
        }
      ]
    }
  ]
}
{% endschema %}
