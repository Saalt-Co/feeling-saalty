<script>    
    class $cro_slt010_cartDrawerBlock extends HTMLElement{
        static observedAttributes = ['data-opened'];
        constructor(){
            super();
        }
        connectedCallback(){
            console.log('slt010-cart-drawer-block added');
            this.addOverlay();
            this.addCloseButton();
        }
        addOverlay(){
            const $t = this;
            if(this.querySelectorAll('slt010-cart-drawer-overlay').length < 1){
                const $overlay = document.createElement('slt010-cart-drawer-overlay');
                $overlay.addEventListener('click', function($e){
                    $t.closeDrawer($e);
                });
                this.appendChild($overlay);
            }
        }
        addCloseButton(){
            const $t = this;
            if(this.querySelectorAll('slt010-cart-drawer-container').length > 0 && this.querySelectorAll('slt010-cart-drawer-close-button').length < 1){
                const $container = this.querySelectorAll('slt010-cart-drawer-container');
                const $closeButton = document.createElement('slt010-cart-drawer-close-button');
                $closeButton.innerHTML = '&times;';
                $closeButton.addEventListener('click', function($e){
                    $t.closeDrawer($e);
                });
                $container[0].appendChild($closeButton);
            }
        }
        closeDrawer($event){
            $event.target.closest(this.tagName).setAttribute('data-opened', 'false');
        }
        attributeChangedCallback(name, oldValue, newValue){
            //console.log('attribute ' + name + ' has changed from ' + oldValue + ' to ' + newValue);
            switch(name){
                case 'data-opened':
                    this.drawerOpened(newValue);
                    break;
                default:
                    break;
            }
        }
        drawerOpened($value){
            if($value === 'true'){
                document.body.classList.add('slt010-cart-drawer-block-open');
            }
            else{
                document.body.classList.remove('slt010-cart-drawer-block-open');
            }
        }
    }
    customElements.define('slt010-cart-drawer-block', $cro_slt010_cartDrawerBlock);

    class $cro_slt010_cartDrawerHeader extends HTMLElement{
        constructor(){
            super();
        }
        connectedCallback(){
            //console.log('slt010-cart-drawer-header added');
        }
    }
    customElements.define('slt010-cart-drawer-header', $cro_slt010_cartDrawerHeader);

    class $cro_slt010_cartDrawerFooter extends HTMLElement{
        static observedAttributes = ['data-cart-qty'];
        constructor(){
            super();
            this.sessionTag = '{{ sessionTag }}';
        }
        connectedCallback(){
            //console.log('slt010-cart-drawer-footer added');
        }
        attributeChangedCallback(name, oldValue, newValue){
            //console.log('attribute ' + name + ' has changed from ' + oldValue + ' to ' + newValue);
            switch(name){
                case 'data-cart-qty':
                    this.update(newValue);
                    break;
                default:
                    break;
            }
        }
        update($value){
            if(parseInt($value) > 0){
                const $cart = JSON.parse(window.sessionStorage.getItem(this.sessionTag));
                const $btn = document.createElement('button');
                const $items = ($cart.item_count === 1) ? ' (1 item)' : ' (' + $cart.item_count + ' items)';
                const $price = ($cart.total_discount !== 0) ? '<span data-slt010-class="slt010-discount">$' + ($cart.items_subtotal_price * .01).toFixed(2) + '</span>&nbsp;<s>$' + ($cart.original_total_price * .01).toFixed(2) + '</s>' : '$' + ($cart.items_subtotal_price * .01).toFixed(2);
                this.innerHTML = '<div data-slt010-class="slt010-cart-drawer-footer-subtotal">' + 
                    '<div data-slt010-class="slt010-cart-drawer-footer-subtotal-label">' + 
                        'Subtotal' + $items +
                    '</div>' +
                    '<div data-slt010-class="slt010-cart-drawer-footer-subtotal-amount">' + 
                        $price +
                    '</div>' +
                '</div>';

                $btn.type = 'button';
                $btn.setAttribute('data-slt010-class','slt010-cart-drawer-footer-checkout-btn');
                $btn.innerHTML = 'checkout';
                $btn.addEventListener('click', function($e){
                    $e.preventDefault();
                    window.location.href = '/checkout/';
                });

                this.appendChild($btn);
            }
            else{
                this.innerHTML = '';
            }
        }
    }
    customElements.define('slt010-cart-drawer-footer', $cro_slt010_cartDrawerFooter);

    class $cro_slt010_cartDrawerCountdown extends HTMLElement{
        static observedAttributes = ['data-cart-qty'];
        constructor(){
            super();
            this.sessionTag = '{{ sessionTag }}';
            this.endTimeSession = 'cro-end-time';
            {%- for block in section.blocks -%}
                {%- case block.type -%}
                    {%- when 'countdown' -%}
                        this.limit = 8
                {%- endcase -%}
            {%- endfor -%}
        }
        connectedCallback(){
            //console.log('slt010-cart-drawer-countdown added');
        }
        attributeChangedCallback(name, oldValue, newValue){
            //console.log('attribute ' + name + ' has changed from ' + oldValue + ' to ' + newValue);
            switch(name){
                case 'data-cart-qty':
                    this.update(newValue);
                    break;
                default:
                    break;
            }
        }
        hasNode($selector){
            return (this.querySelectorAll($selector).length > 0) ? true : false;
        }
        update($value){
            if(parseInt($value) > 0){
                if(!this.hasNode('[data-slt010-class="slt010-countdown-container"]')){
                    this.innerHTML = '<div data-slt010-class="slt010-countdown-container">' + 
                        '<h3 data-slt010-class="slt010-countdown-title">LIMITED STOCK!</h3>' +
                        '<div data-slt010-class="slt010-countdown-content">' +
                            '<div data-slt010-class="slt010-countdown-msg">We\'ve saved your cart for </div>' +
                            '<div data-slt010-class="slt010-countdown"></div>' +
                        '</div>' +
                    '</div>';
                }
            }
            else{
                this.innerHTML = '';
            }
        }
        check($key){
            return (this.get($key) !== null && this.get($key) !== '') ? true : false;
        }
        getEndTime($updateCookie = false){
            const $d = new Date();
            const $e = new Date($d.getTime() + (this.limit * 60 * 1000));
            let $endTime = {
                year: $e.getFullYear(),
                month: $e.getMonth(),
                day: $e.getDate(),
                hours: $e.getHours(),
                minutes: $e.getMinutes(),
                seconds: $e.getSeconds()
            };
            if(!$updateCookie && this.check(this.endTimeSession)){
                const $cookie = window.sessionStorage.getItem(this.endTimeSession);
                $endTime = JSON.parse($cookie);
            }
            else{
                window.sessionStorage.setItem(this.endTimeSession, JSON.stringify($endTime));
            }
            return $endTime;
        }
    }
    customElements.define('slt010-cart-drawer-countdown', $cro_slt010_cartDrawerCountdown);

    class $cro_slt010_cartDrawerProgressBar extends HTMLElement{
        static observedAttributes = ['data-cart-qty'];
        constructor(){
            super();
            this.sessionTag = '{{ sessionTag }}';
            this.nClass = {
                inner: 'data-shipping-progress-bar-inner',
                wrap: 'data-shipping-progress-bar-wrap',
                txtWrp: 'data-shipping-progress-bar-txt-wrap',
                msg: 'data-shipping-progress-bar-msg',
                barWrp: 'data-shipping-progress-bar-bar-wrap',
                bar: 'data-shipping-progress-bar-bar'
            };
            this.id = this.tagName;

            {%- for block in section.blocks -%}
                {%- case block.type -%}
                    {%- when 'progress-bar' -%}
                        {%- assign threshold = block.settings.min -%}
                        {%- assign thresholdShop = threshold | times: 100 -%}
                        {%- assign defaultMsg = block.settings.msg-default | replace: '{amount}', threshold -%}
                        {%- assign appendStr = '<span data-free-ship-difference="' | append: thresholdShop  | append: '"></span>' -%}
                        {%- assign belowMsg =  block.settings.msg-below | replace: '{amount}', appendStr -%}

                        this.shipData = {
                            min: {{ threshold | times: 100 }},
                            msg: {
                                default: '{{ defaultMsg }}',
                                below: '{{ belowMsg }}',
                                free: '{{ block.settings.msg-complete }}'
                            }
                        };
                {%- endcase -%}
            {%- endfor -%}
        }
        connectedCallback(){
            //console.log('slt010-cart-drawer-progress-bar added');
        }
        attributeChangedCallback(name, oldValue, newValue){
            //console.log('attribute ' + name + ' has changed from ' + oldValue + ' to ' + newValue);
            switch(name){
                case 'data-cart-qty':
                    this.update();
                    break;
                default:
                    break;
            }
        }
        hasNode($selector){
            return (this.querySelectorAll($selector).length > 0) ? true : false;
        }
        update(){
            if(!this.hasNode('[' + this.nClass.inner + '="' + this.id +'"]')){
                this.innerHTML = '<div ' + this.nClass.inner + '="' + this.id +'">' +
                    '<div ' + this.nClass.wrap + '="' + this.id +'">' +
                        '<div ' + this.nClass.txtWrp + '="' + this.id +'">' +
                            '<div ' + this.nClass.msg + '="' + this.id +'">' + this.shipData.msg.default + '</div>' +
                        '</div>' +
                        '<div ' + this.nClass.barWrp + '="' + this.id +'" style="display: none;"><div ' + this.nClass.bar + '="' + this.id +'"></div></div>' +
                    '</div>' +
                '</div>';
            }
            this.updateBar();
        }
        updateBar(){
            const $cart = JSON.parse(window.sessionStorage.getItem(this.sessionTag));
            if($cart.item_count > 0){
                const $w = ($cart.items_subtotal_price / this.shipData.min >= 100) ? 100 : $cart.items_subtotal_price / this.shipData.min * 100;
                if($cart.items_subtotal_price < this.shipData.min){
                    const $diff = (this.shipData.min - $cart.items_subtotal_price) * .01;
                    this.querySelector('[' + this.nClass.msg + '="' + this.id + '"]').innerHTML = this.shipData.msg.below;
                    this.querySelector('[' + this.nClass.inner + '="' + this.id +'"] [data-free-ship-difference]').innerHTML = ($diff.toFixed(2));
                    this.querySelector('[' + this.nClass.bar + '="' + this.id + '"]').classList.remove(this.nClass.bar + '-complete');
                    this.querySelector('[' + this.nClass.bar + '="' + this.id + '"]').style.width = $w + '%';
                    this.querySelector('[' + this.nClass.barWrp + '="' + this.id + '"]').style.display = 'block';
                }
                else{
                    this.querySelector('[' + this.nClass.msg + '="' + this.id + '"]').innerHTML = this.shipData.msg.free;
                    this.querySelector('[' + this.nClass.bar + '="' + this.id + '"]').classList.add(this.nClass.bar + '-complete');
                    this.querySelector('[' + this.nClass.bar + '="' + this.id + '"]').style.width = $w + '%';
                    this.querySelector('[' + this.nClass.barWrp + '="' + this.id + '"]').style.display = 'block';
                }
            }
            else{
                this.querySelector('[' + this.nClass.msg + '="' + this.id + '"]').innerHTML = this.shipData.msg.default;
                this.querySelector('[' + this.nClass.bar + '="' + this.id + '"]').classList.remove(this.nClass.bar + '-complete');
                this.querySelector('[' + this.nClass.bar + '="' + this.id + '"]').style.width = '0';
                this.querySelector('[' + this.nClass.barWrp + '="' + this.id + '"]').style.display = 'none';
            }
        }
    }
    customElements.define('slt010-cart-drawer-progress-bar', $cro_slt010_cartDrawerProgressBar);

    class $cro_slt010_cartDrawerMessage extends HTMLElement{
        constructor(){
            super();
        }
        connectedCallback(){
            //console.log('slt010-cart-drawer-message added');
        }
    }
    customElements.define('slt010-cart-drawer-message', $cro_slt010_cartDrawerMessage);
</script>