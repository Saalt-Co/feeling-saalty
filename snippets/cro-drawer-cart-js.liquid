<script>
    class $cro_slt010_drawer_cart_class extends HTMLElement{
        constructor(){
            super();
            this.sessionTag = '{{ sessionTag }}';
            this.currentCart = {{ cart | json }}; //remove quotes when updating the liquid file
            this.slug = 'slt010-cart-drawer';
        }
        connectedCallback(){
            this.updateCart();
        }
        hasNode($selector){
            return (this.querySelectorAll($selector).length > 0) ? true : false;
        }
        each($data, $callback){
            for(let $c = 0; $c < $data.length; $c++){
                $callback($data[$c], $c);
            }
        }
        updateCart(){
            this.updateFunctions();
            setInterval(()=>{
                const $cart = JSON.parse(window.sessionStorage.getItem(this.sessionTag));
                if($cart.item_count !== this.currentCart.item_count){
                    this.currentCart = $cart;
                    this.updateFunctions();
                }
            }, 1000);
        }
        updateFunctions(){
            this.updateCartBody();
            this.updateFooter();
            this.updateProgressBar();
            this.updateCountdown();
            this.updateUpsell();
        }
        updateCartBody(){
            if(this.hasNode(this.slug + '-body')){
                if(this.currentCart.item_count > 0){
                    this.getCartItems();
                    this.upsellCartBody();
                }
                else{
                    this.emptyCartBody();
                }
            }
        }
        getCartItems(){
            const $t = this;
            const $body = this.querySelector(this.slug + '-body');
            const $list = document.createElement(this.slug + '-body-list');
    
            this.each(this.currentCart.items, ($item, $ic)=>{
                $list.appendChild($t.getCartItem($item, $ic));
            });
    
            $body.innerHTML = '';
            $body.appendChild($list);
        }
        getCartItem($data, $count){
            const $o = document.createElement(this.slug + '-body-list-item');
            const $img = (typeof($data.featured_image.url) !== 'undefined' && $data.featured_image.url !== '') ? $data.featured_image.url : $data.image;
            const $media = document.createElement('a');
    
            $media.setAttribute('href', $data.url);
            $media.setAttribute('data-slt010-class', 'slt010-cart-drawer-body-list-item-media');
            $media.innerHTML = '<picture data-slt010-class="slt010-cart-drawer-body-list-item-picture">' +
                '<img src="' + $img + '" alt="' + $data.product_title + '" width="90" height="90" data-slt010-class="slt010-cart-drawer-body-list-item-image" />' +
            '</picture>';
    
            const $icon = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="256" height="256" viewBox="0 0 256 256" xml:space="preserve">' +
                '<g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;" transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)" >' +
                    '<path d="M 64.71 90 H 25.291 c -4.693 0 -8.584 -3.67 -8.859 -8.355 l -3.928 -67.088 c -0.048 -0.825 0.246 -1.633 0.812 -2.234 c 0.567 -0.601 1.356 -0.941 2.183 -0.941 h 59.002 c 0.826 0 1.615 0.341 2.183 0.941 c 0.566 0.601 0.86 1.409 0.813 2.234 l -3.928 67.089 C 73.294 86.33 69.403 90 64.71 90 z M 18.679 17.381 l 3.743 63.913 C 22.51 82.812 23.771 84 25.291 84 H 64.71 c 1.52 0 2.779 -1.188 2.868 -2.705 l 3.742 -63.914 H 18.679 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />' +
                    '<path d="M 80.696 17.381 H 9.304 c -1.657 0 -3 -1.343 -3 -3 s 1.343 -3 3 -3 h 71.393 c 1.657 0 3 1.343 3 3 S 82.354 17.381 80.696 17.381 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />' +
                    '<path d="M 58.729 17.381 H 31.271 c -1.657 0 -3 -1.343 -3 -3 V 8.789 C 28.271 3.943 32.214 0 37.061 0 h 15.879 c 4.847 0 8.789 3.943 8.789 8.789 v 5.592 C 61.729 16.038 60.386 17.381 58.729 17.381 z M 34.271 11.381 h 21.457 V 8.789 C 55.729 7.251 54.478 6 52.939 6 H 37.061 c -1.538 0 -2.789 1.251 -2.789 2.789 V 11.381 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />' +
                    '<path d="M 58.33 74.991 c -0.06 0 -0.118 -0.002 -0.179 -0.005 c -1.653 -0.097 -2.916 -1.517 -2.819 -3.171 l 2.474 -42.244 c 0.097 -1.655 1.508 -2.933 3.171 -2.819 c 1.653 0.097 2.916 1.516 2.819 3.17 l -2.474 42.245 C 61.229 73.761 59.906 74.991 58.33 74.991 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />' +
                    '<path d="M 31.669 74.991 c -1.577 0 -2.898 -1.23 -2.992 -2.824 l -2.473 -42.245 c -0.097 -1.654 1.165 -3.073 2.819 -3.17 c 1.646 -0.111 3.073 1.165 3.17 2.819 l 2.473 42.244 c 0.097 1.654 -1.165 3.074 -2.819 3.171 C 31.788 74.989 31.729 74.991 31.669 74.991 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />' +
                    '<path d="M 45 74.991 c -1.657 0 -3 -1.343 -3 -3 V 29.747 c 0 -1.657 1.343 -3 3 -3 c 1.657 0 3 1.343 3 3 v 42.244 C 48 73.648 46.657 74.991 45 74.991 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />' +
                '</g>' +
            '</svg>';
            let $price = (typeof($data.compare_at_price) !== 'undefined') ? '$' + ($data.compare_at_price * .01).toFixed(2) : '$' + ($data.price * .01).toFixed(2);
            $price = ($data.total_discount !== 0) ? '<span data-slt010-class="slt010-discount">$' + (($data.price - $data.total_discount) * .01).toFixed(2) + '</span>&nbsp;<s>' + $price + '</s>' : $price;
            const $variantTitle = ($data.variant_title !== null) ? $data.variant_title : '';
            let $discountTitle = '';
            this.each($data.discounts, ($discount, $dc)=>{
                $discountTitle += '<div data-discount-line="' + $dc + '">' + $discount.title + '</div>';
            });
            $discountTitle = ($discountTitle !== '') ? '<div data-slt010-class="slt010-cart-drawer-body-list-item-discount-list">' + $discountTitle + '</div>' : '';
            const $meta = document.createElement(this.slug + '-body-list-item-meta');
            $meta.innerHTML = '<a href="' + $data.url + '" data-slt010-class="slt010-cart-drawer-body-list-item-title">' + $data.product_title + '</a>' +
            '<div data-slt010-class="slt010-cart-drawer-body-list-item-variant-title">' + $variantTitle + '</div>' +
            $discountTitle +
            '<button type="button" is="slt010-cart-drawer-remove-item" data-remove="' + $data.key + '" data-slt010-class="slt010-cart-drawer-body-list-item-remove-btn">' + $icon + '</button>' +
            '<div data-slt010-class="slt010-cart-drawer-body-list-item-qty-container">' +
                '<div data-slt010-class="slt010-cart-drawer-body-list-item-qty-wrap">' +
                    '<button type="button" is="slt010-cart-drawer-minus-item" data-qty-minus="' + $data.key + '">-</button>' + 
                    '<input type="number" readonly="readonly" data-qty="' + $data.key + '" value="' + $data.quantity + '" />' +
                    '<button type="button" is="slt010-cart-drawer-add-item" data-qty-add="' + $data.key + '">+</button>' +
                '</div>' +   
            '</div>' +
            '<div data-slt010-class="slt010-cart-drawer-body-list-item-price">' + $price + '</div>';
    
            
            $o.setAttribute('data-slt010-row', $count);
            $o.appendChild($media);
            $o.appendChild($meta);
    
            return $o;
        }
        emptyCartBody(){
            const $empty = document.createElement('slt010-cart-drawer-empty');
            const $body = this.querySelector(this.slug + '-body');
            
            {%- for block in section.blocks -%}
                {%- case block.type -%}
                    {%- when 'body' -%}
                        $empty.innerHTML = '<h4>{{ block.settings.title-empty }}</h4><p>{{ block.settings.content-empty }}</p>';
                {%- endcase -%}
            {%- endfor -%}
            
            $body.innerHTML = '';
            $body.appendChild($empty);
        }
        upsellCartBody(){
            {%- for block in section.blocks -%}
                {%- case block.type -%}
                    {%- when 'body' -%}
                        {%- if block.settings.active-upsell and block.settings.upsell-collection != blank -%}
    
                        if(this.querySelectorAll('slt010-cart-drawer-upsell-block'.length === 0)){
                            const $body = this.querySelector(this.slug + '-body');
                            const $upsell = document.createElement('slt010-cart-drawer-upsell-block');
                            $body.appendChild($upsell);
                        }
    
                        {%- endif -%}
                {%- endcase -%}
            {%- endfor -%}
        }
        
        updateFooter(){
            if(this.hasNode(this.slug + '-footer')){
                const $footer = this.querySelector(this.slug + '-footer');
                $footer.setAttribute('data-cart-qty', this.currentCart.item_count);
            }
        }
        updateProgressBar(){
            if(this.hasNode(this.slug + '-progress-bar')){
                const $progressBar = this.querySelector(this.slug + '-progress-bar');
                $progressBar.setAttribute('data-cart-qty', this.currentCart.item_count);
            }
        }
        updateCountdown(){
            if(this.hasNode(this.slug + '-countdown')){
                const $countdown = this.querySelector(this.slug + '-countdown');
                $countdown.setAttribute('data-cart-qty', this.currentCart.item_count);
            }
        }
        updateUpsell(){
            if(this.hasNode(this.slug + '-upsell-block')){
                const $upsell = this.querySelector(this.slug + '-upsell-block');
                $upsell.setAttribute('data-cart-qty', this.currentCart.item_count);
            }
        }
    }
    customElements.define('slt010-cart-drawer', $cro_slt010_drawer_cart_class);
    
    class $croShopifyCartClass{
        constructor($sessionTag = 'croCartSession'){
            this.sessionTag = $sessionTag;
        }
        /**
         * $data = object {items: [{id: NUMBER, quantity: NUMBER}]}
         * $callBack = function ()=>{} what to do when the product is added to cart
         * $redirect = boolean set true to redirect to another page like the cart page or checkout page
         */
        async add($data, $callBack, $redirect = false){
            const $t = this;
            if($data.items.length > 0){
                const $t = this;
                fetch('/cart/add.json', {
                    method: 'POST',
                    headers: {
                        'Content-Type':'application/json',
                        'Accept':'application/json'
                    },
                    body: JSON.stringify($data)
                }).then(($res)=>{
                    return $res.json();
                }).then(($data)=>{
                    window.sessionStorage.setItem($t.sessionTag, JSON.stringify($data));
                    if($redirect){
                        $callBack();
                    }
                    else{
                        $callBack($data);
                    }
                });
            }
        }
        async get($callBack){
            const $t = this;
            fetch('/cart.json').then(($res)=>{
                return $res.json();
            }).then(($data)=>{
                window.sessionStorage.setItem($t.sessionTag, JSON.stringify($data));
                $callBack($data);
            });
        }
        /**
         * $data is a JSON value with key item and quantity example: {id: CART_ITEM_KEY, quantity: NUMBER}
         * or
         * $data is a JSON value with cart line item and quantity example: {line: LINE_NUMBER, quantity: NUMBER}
         */
        async update($data, $callBack){
            const $t = this;
            fetch('/cart/change.json', {
                method: 'POST',
                headers: {
                    'Content-Type':'application/json',
                    'Accept':'application/json'
                },
                body: JSON.stringify($data)
            }).then(($res)=>{
                return $res.json();
            }).then(($data)=>{
                window.sessionStorage.setItem($t.sessionTag, JSON.stringify($data));
                $callBack($data);
            });
        }
    }
    
    class $cro_slt010_drawer_cart_remove_item_class extends HTMLButtonElement{
        constructor(){
            super();
            this.cart = new $croShopifyCartClass('{{ sessionTag }}');
        }
        connectedCallback(){
            const $t = this;
            //console.log('slt010-cart-drawer-remove-item added');
            this.addEventListener('click', function($e){
                const $key = ($e.target.tagName.toLowerCase() !== this.tagName) ? $e.target.closest(this.tagName).getAttribute('data-remove') : $e.target.getAttribute('data-remove');
                $t.cart.update({id: $key, quantity: 0}, ($data)=>{
                    console.log('updated');
                });
            });
        }
    }
    customElements.define('slt010-cart-drawer-remove-item', $cro_slt010_drawer_cart_remove_item_class, {extends: 'button'});
    
    class $cro_slt010_drawer_cart_add_item_class extends HTMLButtonElement{
        constructor(){
            super();
            this.cart = new $croShopifyCartClass('{{ sessionTag }}');
        }
        connectedCallback(){
            const $t = this;
            //console.log('slt010-cart-drawer-add-item added');
            this.addEventListener('click', function($e){
                const $elm = ($e.target.tagName.toLowerCase() !== this.tagName) ? $e.target.closest(this.tagName) : $e.target;
                const $key = ($e.target.tagName.toLowerCase() !== this.tagName) ? $e.target.closest(this.tagName).getAttribute('data-qty-add') : $e.target.getAttribute('data-qty-add');
                const $sib = parseInt($elm.previousElementSibling.getAttribute('value'));
                $t.cart.update({id: $key, quantity: ($sib + 1)}, ($data)=>{
                    console.log('updated');
                });
            });
        }
    }
    customElements.define('slt010-cart-drawer-add-item', $cro_slt010_drawer_cart_add_item_class, {extends: 'button'});
    
    class $cro_slt010_drawer_cart_minus_item_class extends HTMLButtonElement{
        constructor(){
            super();
            this.cart = new $croShopifyCartClass('{{ sessionTag }}');
        }
        connectedCallback(){
            const $t = this;
            //console.log('slt010-cart-drawer-minus-item added');
            this.addEventListener('click', function($e){
                const $elm = ($e.target.tagName.toLowerCase() !== this.tagName) ? $e.target.closest(this.tagName) : $e.target;
                const $key = ($e.target.tagName.toLowerCase() !== this.tagName) ? $e.target.closest(this.tagName).getAttribute('data-qty-minus') : $e.target.getAttribute('data-qty-minus');
                const $sib = parseInt($elm.nextElementSibling.getAttribute('value'));
                const $val = ($sib - 1 > 0) ? $sib - 1 : 0;
                $t.cart.update({id: $key, quantity: $val}, ($data)=>{
                    console.log('updated');
                });
            });
        }
    }
    customElements.define('slt010-cart-drawer-minus-item', $cro_slt010_drawer_cart_minus_item_class, {extends: 'button'});
    
    
    {%- for block in section.blocks -%}
        {%- case block.type -%}
            {%- when 'body' -%}
                {%- if block.settings.active-upsell and block.settings.upsell-collection != blank -%}
    
                    class $cro_slt010_cartDrawerUpsell extends HTMLElement{
                        static observedAttributes = ['data-cart-qty'];
                        constructor(){
                            super();
                            this.cart = new $croShopifyCartClass('{{ sessionTag }}');
                            this.sessionTag = '{{ sessionTag }}';
                            this.collection = {{ block.settings.upsell-collection.products | json}};
                        }
                        connectedCallback(){
                            //console.log('slt010-cart-drawer-upsell-block added');
                        }
                        attributeChangedCallback(name, oldValue, newValue){
                            //console.log('attribute ' + name + ' has changed from ' + oldValue + ' to ' + newValue);
                            switch(name){
                                case 'data-cart-qty':
                                    this.update(newValue);
                                    break;
                                default:
                                    break;
                            }
                        }
                        update($value){
                            if(parseInt($value) > 0){
                                const $cart = JSON.parse(window.sessionStorage.getItem(this.sessionTag));
                                const $upsellSection = (this.querySelectorAll('slt010-cart-drawer-upsell').length === 0) ? document.createElement('slt010-cart-drawer-upsell') : this.querySelector('slt010-cart-drawer-upsell');
                                $upsellSection.innerHTML = '';
                    
                                if(this.querySelectorAll('h4').length === 0){
                                    this.innerHTML = '<h4>{{ block.settings.title-upsell }}</h4>';
                                }
                    
                                if(this.querySelectorAll('slt010-cart-drawer-upsell').length === 0){
                                    this.appendChild($upsellSection);
                                }
                            }
                            else{
                                this.innerHTML = '';
                            }
                        }
                        checkCart4UpsellItem($data, $handle){
                            const $t = this;
                            let $r = false;
                            $t.each($data.items, ($item, $ic)=>{
                                if($item.handle === $handle){
                                    $r = true;
                                }
                            });
                            return $r;
                        }
                        getUpsellItemHTML($selector, $data){
                            const $t = this;
                            let $opt = '';
                            this.each($data.variants, ($variant, $vc)=>{
                                if($variant.available){
                                    $opt += '<option value="' + $variant.id + '">' + $variant.title + '</option>';
                                }
                            });
                            if($data.variants[0].title.toLowerCase() === 'default title'){
                                $opt = '<select data-slt010-class="slt010-cart-drawer-upsell-meta-form-select" data-slt010-visible="slt010-hidden">' + $opt + '</select>';
                            }
                            else{
                                $opt = '<select data-slt010-class="slt010-cart-drawer-upsell-meta-form-select" data-slt010-visible="slt010-visible">' + $opt + '</select>';
                            }
                            const $o = $t.j(
                                '<div data-slt010-class="slt010-cart-drawer-upsell-item" data-slt010-handle="' + $data.handle + '">' + 
                                    '<a href="' + $data.url + '" data-slt010-class="slt010-cart-drawer-upsell-image-link">' +
                                        '<picture data-slt010-class="slt010-cart-drawer-upsell-picture">' +
                                            '<img src="' + $data.images[0] + '" alt="' + $data.title + '" width="113" height="113" data-slt010-class="slt010-cart-drawer-upsell-image" />' +
                                        '</picture>' +
                                    '</a>' +
                                    '<div data-slt010-class="slt010-cart-drawer-upsell-meta">' +
                                        '<a href="' + $data.url + '" data-slt010-class="slt010-cart-drawer-upsell-title-link">' +
                                            $data.title +
                                        '</a>' +
                                        '<div data-slt010-class="slt010-cart-drawer-upsell-meta-price">' +
                                            '$' + ($data.price * .01).toFixed(2) + 
                                        '</div>' +
                                        '<div data-slt010-class="slt010-cart-drawer-upsell-meta-form">' +
                                            $opt +
                                            '<button type="button" data-slt010-class="slt010-cart-drawer-upsell-meta-form-btn">Add</button>' +
                                        '</div>' +
                                    '</div>' +
                                '</div>'
                            );
                            $o.find('[data-slt010-class="slt010-cart-drawer-upsell-meta-form-btn"]').on('click', function($e){
                                $e.preventDefault();
                                const $vid = $t.j(this).prev().val();
                                const $data = {items: [{id: parseInt($vid), quantity: 1}]};
                                $t.cart.add($data, ($r)=>{
                                    $t.updateCartContent($r);
                                });
                            });
                            $t.j($selector).append($o);
                        }
                    }
                    customElements.define('slt010-cart-drawer-upsell-block', $cro_slt010_cartDrawerUpsell);
    
    
                {%- endif -%}
        {%- endcase -%}
    {%- endfor -%}
</script>